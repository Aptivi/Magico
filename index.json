{
  "api/Magico.Enumeration.ArrayTools.html": {
    "href": "api/Magico.Enumeration.ArrayTools.html",
    "title": "Class ArrayTools | Magico API - Aptivi",
    "summary": "Class ArrayTools Array tools that are useful Inheritance object ArrayTools Namespace: Magico.Enumeration Assembly: Magico.dll Syntax public static class ArrayTools Properties | Edit this page View Source RandomShared Shared random for the random number generator (in case you don't have System.Random.Shared) Declaration public static Random RandomShared { get; } Property Value Type Description Random Methods | Edit this page View Source RandomizeArray<T>(T[]) Randomizes the array by shuffling elements, irrespective of the type, using a type of Schwartzian transform Declaration public static T[]? RandomizeArray<T>(this T[] array) Parameters Type Name Description T[] array Target array to sort randomly Returns Type Description T[] A new array containing elements that are shuffled. Type Parameters Name Description T Target type. It's not necessarily an integer. | Edit this page View Source SortNumbers<T>(T[]) Sorts the byte numbers using the bubble sort algorithm Declaration public static T[] SortNumbers<T>(this T[] unsorted) Parameters Type Name Description T[] unsorted An unsorted array of numbers Returns Type Description T[] Sorted array of byte numbers Type Parameters Name Description T"
  },
  "api/Magico.Enumeration.EnumerableExtensions.html": {
    "href": "api/Magico.Enumeration.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Magico API - Aptivi",
    "summary": "Class EnumerableExtensions Extensions class for non-generic System.Collections.IEnumerable instances. Inheritance object EnumerableExtensions Namespace: Magico.Enumeration Assembly: Magico.dll Syntax public static class EnumerableExtensions Methods | Edit this page View Source GetElementFromIndex(IEnumerable, int) Gets an element from the index Declaration public static object? GetElementFromIndex(this IEnumerable enumerable, int index) Parameters Type Name Description IEnumerable enumerable The target enumerable to get an element int index Zero-based index number of an element Returns Type Description object An element from this enumerable | Edit this page View Source Length(IEnumerable) Counts the elements found in this enumerable Declaration public static int Length(this IEnumerable enumerable) Parameters Type Name Description IEnumerable enumerable The target enumerable to count its elements Returns Type Description int A number of elements | Edit this page View Source ToDictionarySafe<TSource, TKey, TValue>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TValue>) Safely converts the source enumerable to the dictionary Declaration public static Dictionary<TKey, TValue> ToDictionarySafe<TSource, TKey, TValue>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TValue> valueSelector) where TKey : notnull Parameters Type Name Description IEnumerable<TSource> source Func<TSource, TKey> keySelector Func<TSource, TValue> valueSelector Returns Type Description Dictionary<TKey, TValue> Type Parameters Name Description TSource Source element type TKey Key type TValue Value type | Edit this page View Source Zip<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>) Merges the two input sequences into one Declaration public static IEnumerable<(TFirst First, TSecond Second)> Zip<TFirst, TSecond>(this IEnumerable<TFirst> source, IEnumerable<TSecond> second) Parameters Type Name Description IEnumerable<TFirst> source Source sequence to merge IEnumerable<TSecond> second Second sequence to merge Returns Type Description IEnumerable<(TFirst First, TSecond Second)> Merged sequences Type Parameters Name Description TFirst First type TSecond Second type"
  },
  "api/Magico.Enumeration.html": {
    "href": "api/Magico.Enumeration.html",
    "title": "Namespace Magico.Enumeration | Magico API - Aptivi",
    "summary": "Namespace Magico.Enumeration Classes ArrayTools Array tools that are useful EnumerableExtensions Extensions class for non-generic System.Collections.IEnumerable instances."
  },
  "api/Magico.Files.MagicException.html": {
    "href": "api/Magico.Files.MagicException.html",
    "title": "Class MagicException | Magico API - Aptivi",
    "summary": "Class MagicException Creates an instance of magic exception Inheritance object Exception MagicException Namespace: Magico.Files Assembly: Magico.dll Syntax public class MagicException : Exception Constructors | Edit this page View Source MagicException() Raises the libmagic exception Declaration public MagicException() | Edit this page View Source MagicException(string) Raises the libmagic exception Declaration public MagicException(string message) Parameters Type Name Description string message Message for additional info | Edit this page View Source MagicException(string, Exception) Raises the libmagic exception Declaration public MagicException(string message, Exception innerException) Parameters Type Name Description string message Message for additional info Exception innerException Inner exception for additional diagnostic info Extension Methods IntegerTools.GetDigits<T>(T) IntegerTools.SizeString<T>(T) IntegerTools.SwapIfSourceLarger<T>(T, T) IntegerTools.ToBinary<T>(T) IntegerTools.ToHex<T>(T) IntegerTools.ToNumber<T>(T) IntegerTools.ToOctal<T>(T)"
  },
  "api/Magico.Files.MagicHandler.html": {
    "href": "api/Magico.Files.MagicHandler.html",
    "title": "Class MagicHandler | Magico API - Aptivi",
    "summary": "Class MagicHandler Magic handling tools Inheritance object MagicHandler Namespace: Magico.Files Assembly: Magico.dll Syntax public static class MagicHandler Properties | Edit this page View Source MagicVersionId libmagic version identification number Declaration public static int MagicVersionId { get; } Property Value Type Description int Methods | Edit this page View Source GetMagicCustomType(string, MagicFlags, MagicParameters, int) Gets the file magic Mime type information Declaration public static string GetMagicCustomType(string filePath, MagicFlags flags, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path MagicFlags flags Magic flags to customize the output and the behavior of the native library MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicCustomType(string, string, MagicFlags, MagicParameters, int) Gets the file magic Mime type information Declaration public static string GetMagicCustomType(string filePath, string magicPath, MagicFlags flags, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path string magicPath Path to the file magic database MagicFlags flags Magic flags to customize the output and the behavior of the native library MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicInfo(string, MagicParameters, int) Gets the file magic information Declaration public static string GetMagicInfo(string filePath, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicInfo(string, string, MagicParameters, int) Gets the file magic information Declaration public static string GetMagicInfo(string filePath, string magicPath, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path string magicPath Path to the file magic database MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicMimeInfo(string, MagicParameters, int) Gets the file magic Mime information Declaration public static string GetMagicMimeInfo(string filePath, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicMimeInfo(string, string, MagicParameters, int) Gets the file magic Mime information Declaration public static string GetMagicMimeInfo(string filePath, string magicPath, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path string magicPath Path to the file magic database MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicMimeType(string, MagicParameters, int) Gets the file magic Mime type information Declaration public static string GetMagicMimeType(string filePath, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicMimeType(string, string, MagicParameters, int) Gets the file magic Mime type information Declaration public static string GetMagicMimeType(string filePath, string magicPath, MagicParameters parameter = MagicParameters.None, int paramValue = 0) Parameters Type Name Description string filePath Target file path string magicPath Path to the file magic database MagicParameters parameter Parameter to use int paramValue Parameter value to set to Returns Type Description string | Edit this page View Source GetMagicPaths(string?, bool) Gets the file magic paths Declaration public static string[] GetMagicPaths(string? magicPath = null, bool systemWide = false) Parameters Type Name Description string magicPath Magic path. If null, the libmagic library tries to find the magic database files. bool systemWide Uses system-wide magic path if magicPath is null. This has no effect if that path is not null Returns Type Description string[] A colon separated list of magic locations"
  },
  "api/Magico.Files.html": {
    "href": "api/Magico.Files.html",
    "title": "Namespace Magico.Files | Magico API - Aptivi",
    "summary": "Namespace Magico.Files Classes MagicException Creates an instance of magic exception MagicHandler Magic handling tools"
  },
  "api/Magico.Localized.LocalStrings.html": {
    "href": "api/Magico.Localized.LocalStrings.html",
    "title": "Class LocalStrings | Magico API - Aptivi",
    "summary": "Class LocalStrings Localized string tools Inheritance object LocalStrings Namespace: Magico.Localized Assembly: Magico.dll Syntax public static class LocalStrings Properties Languages Queries the languages Declaration public static Dictionary<string, string> Languages { get; } Property Value Type Description Dictionary<string, string> Localizations Queries the localizations Declaration public static string[] Localizations { get; } Property Value Type Description string[] Methods CheckCulture(string, string) Checks to see if the given culture in a specific language exists Declaration public static bool CheckCulture(string culture, string lang) Parameters Type Name Description string culture Culture ID string lang Language to process Returns Type Description bool True if exists; false otherwise Exists(string, string) Checks to see if the given string using the string ID in a specific language exists Declaration public static bool Exists(string id, string lang) Parameters Type Name Description string id String ID that represents a localization string lang Language to translate to Returns Type Description bool True if exists; false otherwise ListLanguagesCulture(string) Lists languages in a given culture Declaration public static string[] ListLanguagesCulture(string culture) Parameters Type Name Description string culture Culture ID Returns Type Description string[] A list of languages Translate(string, string) Translates the given string using the string ID in a specific language Declaration public static string Translate(string id, string lang) Parameters Type Name Description string id String ID that represents a localization string lang Language to translate to Returns Type Description string A translated string"
  },
  "api/Magico.Localized.html": {
    "href": "api/Magico.Localized.html",
    "title": "Namespace Magico.Localized | Magico API - Aptivi",
    "summary": "Namespace Magico.Localized Classes LocalStrings Localized string tools"
  },
  "api/Magico.Native.Interop.MagicFlags.html": {
    "href": "api/Magico.Native.Interop.MagicFlags.html",
    "title": "Enum MagicFlags | Magico API - Aptivi",
    "summary": "Enum MagicFlags libmagic flags Namespace: Magico.Native.Interop Assembly: Magico.Native.dll Syntax public enum MagicFlags Fields Name Description Apple #define MAGIC_APPLE 0x0000800 Check #define MAGIC_CHECK 0x0000040 Compress #define MAGIC_COMPRESS 0x0000004 CompressTransp #define MAGIC_COMPRESS_TRANSP 0x2000000 Continue #define MAGIC_CONTINUE 0x0000020 Debug #define MAGIC_DEBUG 0x0000001 Devices #define MAGIC_DEVICES 0x0000008 Error #define MAGIC_ERROR 0x0000200 Extension #define MAGIC_EXTENSION 0x1000000 Mime #define MAGIC_MIME (MAGIC_MIME_TYPE|MAGIC_MIME_ENCODING) MimeEncoding #define MAGIC_MIME_ENCODING 0x0000400 MimeType #define MAGIC_MIME_TYPE 0x0000010 NoCheckAppType #define MAGIC_NO_CHECK_APPTYPE 0x0008000 NoCheckBuiltin #define MAGIC_NO_CHECK_BUILTIN ... NoCheckCdf #define MAGIC_NO_CHECK_CDF 0x0040000 NoCheckCompress #define MAGIC_NO_CHECK_COMPRESS 0x0001000 NoCheckCsv #define MAGIC_NO_CHECK_CSV 0x0080000 NoCheckElf #define MAGIC_NO_CHECK_ELF 0x0010000 NoCheckEncoding #define MAGIC_NO_CHECK_ENCODING 0x0200000 NoCheckJson #define MAGIC_NO_CHECK_JSON 0x0400000 NoCheckSimh #define MAGIC_NO_CHECK_SIMH 0x0800000 NoCheckSoft #define MAGIC_NO_CHECK_SOFT 0x0004000 NoCheckTar #define MAGIC_NO_CHECK_TAR 0x0002000 NoCheckText #define MAGIC_NO_CHECK_TEXT 0x0020000 NoCheckTokens #define MAGIC_NO_CHECK_TOKENS 0x0100000 NoCompressFork #define MAGIC_NO_COMPRESS_FORK 0x4000000 NoDesc #define MAGIC_NODESC (MAGIC_EXTENSION|MAGIC_MIME|MAGIC_APPLE) None #define MAGIC_NONE 0x0000000 PreserveAccessTime #define MAGIC_PRESERVE_ATIME 0x0000080 Raw #define MAGIC_RAW 0x0000100 Symlink #define MAGIC_SYMLINK 0x0000002 Extension Methods IntegerTools.GetDigits<MagicFlags>(MagicFlags) IntegerTools.SizeString<MagicFlags>(MagicFlags) IntegerTools.SwapIfSourceLarger<MagicFlags>(MagicFlags, MagicFlags) IntegerTools.ToBinary<MagicFlags>(MagicFlags) IntegerTools.ToHex<MagicFlags>(MagicFlags) IntegerTools.ToNumber<MagicFlags>(MagicFlags) IntegerTools.ToOctal<MagicFlags>(MagicFlags)"
  },
  "api/Magico.Native.Interop.MagicParameters.html": {
    "href": "api/Magico.Native.Interop.MagicParameters.html",
    "title": "Enum MagicParameters | Magico API - Aptivi",
    "summary": "Enum MagicParameters Magic parameters Namespace: Magico.Native.Interop Assembly: Magico.Native.dll Syntax public enum MagicParameters Fields Name Description BytesMax #define MAGIC_PARAM_BYTES_MAX 6 ElfNotesMax #define MAGIC_PARAM_ELF_NOTES_MAX 4 ElfPhnumMax #define MAGIC_PARAM_ELF_PHNUM_MAX 2 ElfShSizeMax #define MAGIC_PARAM_ELF_SHSIZE_MAX 8 ElfShnumMax #define MAGIC_PARAM_ELF_SHNUM_MAX 3 EncodingMax #define MAGIC_PARAM_ENCODING_MAX 7 InDirMax #define MAGIC_PARAM_INDIR_MAX 0 MagWarnMax #define MAGIC_PARAM_MAGWARN_MAX 9 NameMax #define MAGIC_PARAM_NAME_MAX 1 None No parameters RegexMax #define MAGIC_PARAM_REGEX_MAX 5 Extension Methods IntegerTools.GetDigits<MagicParameters>(MagicParameters) IntegerTools.SizeString<MagicParameters>(MagicParameters) IntegerTools.SwapIfSourceLarger<MagicParameters>(MagicParameters, MagicParameters) IntegerTools.ToBinary<MagicParameters>(MagicParameters) IntegerTools.ToHex<MagicParameters>(MagicParameters) IntegerTools.ToNumber<MagicParameters>(MagicParameters) IntegerTools.ToOctal<MagicParameters>(MagicParameters)"
  },
  "api/Magico.Native.Interop.html": {
    "href": "api/Magico.Native.Interop.html",
    "title": "Namespace Magico.Native.Interop | Magico API - Aptivi",
    "summary": "Namespace Magico.Native.Interop Enums MagicFlags libmagic flags MagicParameters Magic parameters"
  },
  "api/Magico.Native.Localized.LocalStrings.html": {
    "href": "api/Magico.Native.Localized.LocalStrings.html",
    "title": "Class LocalStrings | Magico API - Aptivi",
    "summary": "Class LocalStrings Localized string tools Inheritance object LocalStrings Namespace: Magico.Native.Localized Assembly: Magico.Native.dll Syntax public static class LocalStrings Properties Languages Queries the languages Declaration public static Dictionary<string, string> Languages { get; } Property Value Type Description Dictionary<string, string> Localizations Queries the localizations Declaration public static string[] Localizations { get; } Property Value Type Description string[] Methods CheckCulture(string, string) Checks to see if the given culture in a specific language exists Declaration public static bool CheckCulture(string culture, string lang) Parameters Type Name Description string culture Culture ID string lang Language to process Returns Type Description bool True if exists; false otherwise Exists(string, string) Checks to see if the given string using the string ID in a specific language exists Declaration public static bool Exists(string id, string lang) Parameters Type Name Description string id String ID that represents a localization string lang Language to translate to Returns Type Description bool True if exists; false otherwise ListLanguagesCulture(string) Lists languages in a given culture Declaration public static string[] ListLanguagesCulture(string culture) Parameters Type Name Description string culture Culture ID Returns Type Description string[] A list of languages Translate(string, string) Translates the given string using the string ID in a specific language Declaration public static string Translate(string id, string lang) Parameters Type Name Description string id String ID that represents a localization string lang Language to translate to Returns Type Description string A translated string"
  },
  "api/Magico.Native.Localized.html": {
    "href": "api/Magico.Native.Localized.html",
    "title": "Namespace Magico.Native.Localized | Magico API - Aptivi",
    "summary": "Namespace Magico.Native.Localized Classes LocalStrings Localized string tools"
  },
  "api/Magico.Reflection.BaseClassTools.html": {
    "href": "api/Magico.Reflection.BaseClassTools.html",
    "title": "Class BaseClassTools | Magico API - Aptivi",
    "summary": "Class BaseClassTools Tools for base classes Inheritance object BaseClassTools Namespace: Magico.Reflection Assembly: Magico.dll Syntax public static class BaseClassTools Methods | Edit this page View Source GetBaseTypes(Type) Gets the base types that a class inherits from Declaration public static Type[] GetBaseTypes(Type sourceType) Parameters Type Name Description Type sourceType Source type to query the base classes Returns Type Description Type[] Type instances that contain information about base classes"
  },
  "api/Magico.Reflection.FieldManager.html": {
    "href": "api/Magico.Reflection.FieldManager.html",
    "title": "Class FieldManager | Magico API - Aptivi",
    "summary": "Class FieldManager Field management module Inheritance object FieldManager Namespace: Magico.Reflection Assembly: Magico.dll Syntax public static class FieldManager Methods | Edit this page View Source CheckField(string, Type) Checks the specified field if it exists Declaration public static bool CheckField(string Variable, Type Type) Parameters Type Name Description string Variable Field name. Use operator NameOf to get name. Type Type Field type Returns Type Description bool | Edit this page View Source GetAllFields(Type[]) Gets all the fields from the type dynamically Declaration public static Dictionary<string, object?> GetAllFields(Type[] types) Parameters Type Name Description Type[] types Array of types to query Returns Type Description Dictionary<string, object> Dictionary containing all fields | Edit this page View Source GetAllFieldsNoEvaluation(Type[]) Gets all the fields from the type without evaluation Declaration public static Dictionary<string, Type> GetAllFieldsNoEvaluation(Type[] types) Parameters Type Name Description Type[] types Array of types to query Returns Type Description Dictionary<string, Type> Dictionary containing all fields | Edit this page View Source GetAllFields<T>(T, Type[]) Gets all the fields from the type dynamically Declaration public static Dictionary<string, object?> GetAllFields<T>(T instance, Type[] types) Parameters Type Name Description T instance Instance Type[] types Array of types to query Returns Type Description Dictionary<string, object> Dictionary containing all fields Type Parameters Name Description T | Edit this page View Source GetField(string, Type) Gets a field from variable name Declaration public static FieldInfo? GetField(string Variable, Type Type) Parameters Type Name Description string Variable Field name. Use operator NameOf to get name. Type Type Field type Returns Type Description FieldInfo Field information | Edit this page View Source GetFieldValue(FieldInfo?) Gets the value of a field dynamically Declaration public static object? GetFieldValue(FieldInfo? Variable) Parameters Type Name Description FieldInfo Variable Field info instance. Returns Type Description object Value of a field | Edit this page View Source GetFieldValue(string, Type?) Gets the value of a field dynamically Declaration public static object? GetFieldValue(string Variable, Type? VariableType) Parameters Type Name Description string Variable Field name. Use operator NameOf to get name. Type VariableType Field type Returns Type Description object Value of a field | Edit this page View Source GetFieldValueInstanceExplicit(object, string, Type?) Gets the value of a field dynamically Declaration public static object? GetFieldValueInstanceExplicit(object instance, string Variable, Type? VariableType) Parameters Type Name Description object instance Instance class to fetch value from string Variable Field name. Use operator NameOf to get name. Type VariableType Field type Returns Type Description object Value of a field | Edit this page View Source GetFieldValueInstance<T>(T, FieldInfo?) Gets the value of a field dynamically Declaration public static object? GetFieldValueInstance<T>(T instance, FieldInfo? Variable) Parameters Type Name Description T instance Instance class to fetch value from FieldInfo Variable Field info instance. Returns Type Description object Value of a field Type Parameters Name Description T | Edit this page View Source GetFieldValueInstance<T>(T, string) Gets the value of a field dynamically Declaration public static object? GetFieldValueInstance<T>(T instance, string Variable) Parameters Type Name Description T instance Instance class to fetch value from string Variable Field name. Use operator NameOf to get name. Returns Type Description object Value of a field Type Parameters Name Description T | Edit this page View Source GetFieldValueInstance<T>(T, string, Type?) Gets the value of a field dynamically Declaration public static object? GetFieldValueInstance<T>(T instance, string Variable, Type? VariableType) Parameters Type Name Description T instance Instance class to fetch value from string Variable Field name. Use operator NameOf to get name. Type VariableType Field type Returns Type Description object Value of a field Type Parameters Name Description T | Edit this page View Source GetFields(Type) Gets the fields from the type dynamically Declaration public static Dictionary<string, object?> GetFields(Type VariableType) Parameters Type Name Description Type VariableType Variable type Returns Type Description Dictionary<string, object> Dictionary containing all fields | Edit this page View Source GetFieldsNoEvaluation(Type) Gets the fields from the type without evaluation Declaration public static Dictionary<string, Type> GetFieldsNoEvaluation(Type VariableType) Parameters Type Name Description Type VariableType Variable type Returns Type Description Dictionary<string, Type> Dictionary containing all fields | Edit this page View Source GetFields<T>(T, Type) Gets the fields from the type dynamically Declaration public static Dictionary<string, object?> GetFields<T>(T instance, Type VariableType) Parameters Type Name Description T instance Instance Type VariableType Variable type Returns Type Description Dictionary<string, object> Dictionary containing all fields Type Parameters Name Description T | Edit this page View Source SetFieldValue(FieldInfo?, object?) Sets the value of a field to the new value dynamically Declaration public static void SetFieldValue(FieldInfo? Variable, object? VariableValue) Parameters Type Name Description FieldInfo Variable Field info instance. object VariableValue New value | Edit this page View Source SetFieldValue(string, object?, Type?) Sets the value of a field to the new value dynamically Declaration public static void SetFieldValue(string Variable, object? VariableValue, Type? VariableType) Parameters Type Name Description string Variable Field name. Use operator NameOf to get name. object VariableValue New value Type VariableType Field type | Edit this page View Source SetFieldValueInstanceExplicit(object, string, object?, Type?) Sets the value of a field to the new value dynamically Declaration public static void SetFieldValueInstanceExplicit(object instance, string Variable, object? VariableValue, Type? VariableType) Parameters Type Name Description object instance Instance class to make changes on string Variable Field name. Use operator NameOf to get name. object VariableValue New value Type VariableType Field type | Edit this page View Source SetFieldValueInstance<T>(T, FieldInfo?, object?) Sets the value of a field to the new value dynamically Declaration public static void SetFieldValueInstance<T>(T instance, FieldInfo? Variable, object? VariableValue) Parameters Type Name Description T instance Instance class to make changes on FieldInfo Variable Field info instance. object VariableValue New value Type Parameters Name Description T | Edit this page View Source SetFieldValueInstance<T>(T, string, object?) Sets the value of a field to the new value dynamically Declaration public static void SetFieldValueInstance<T>(T instance, string Variable, object? VariableValue) Parameters Type Name Description T instance Instance class to make changes on string Variable Field name. Use operator NameOf to get name. object VariableValue New value Type Parameters Name Description T | Edit this page View Source SetFieldValueInstance<T>(T, string, object?, Type?) Sets the value of a field to the new value dynamically Declaration public static void SetFieldValueInstance<T>(T instance, string Variable, object? VariableValue, Type? VariableType) Parameters Type Name Description T instance Instance class to make changes on string Variable Field name. Use operator NameOf to get name. object VariableValue New value Type VariableType Field type Type Parameters Name Description T"
  },
  "api/Magico.Reflection.IntegerTools.html": {
    "href": "api/Magico.Reflection.IntegerTools.html",
    "title": "Class IntegerTools | Magico API - Aptivi",
    "summary": "Class IntegerTools Tools to manipulate with integers Inheritance object IntegerTools Namespace: Magico.Reflection Assembly: Magico.dll Syntax public static class IntegerTools Methods | Edit this page View Source GetDigits<T>(T) Gets the amount of digits in a specified number Declaration public static int GetDigits<T>(this T Number) Parameters Type Name Description T Number Number to query its digit count Returns Type Description int How many digits are there in a number Type Parameters Name Description T | Edit this page View Source SizeString<T>(T) Converts a file size in bytes to a human-readable format Declaration public static string SizeString<T>(this T bytes) Parameters Type Name Description T bytes Returns Type Description string Type Parameters Name Description T | Edit this page View Source SwapIfSourceLarger(ref int, ref int) Swaps the two numbers if the source is larger than the target Declaration public static void SwapIfSourceLarger(this ref int SourceNumber, ref int TargetNumber) Parameters Type Name Description int SourceNumber Number int TargetNumber Number | Edit this page View Source SwapIfSourceLarger(ref long, ref long) Swaps the two numbers if the source is larger than the target Declaration public static void SwapIfSourceLarger(this ref long SourceNumber, ref long TargetNumber) Parameters Type Name Description long SourceNumber Number long TargetNumber Number | Edit this page View Source SwapIfSourceLarger<T>(T, T) Swaps the two numbers if the source is larger than the target Declaration public static (T source, T target) SwapIfSourceLarger<T>(this T SourceNumber, T TargetNumber) Parameters Type Name Description T SourceNumber Number T TargetNumber Number Returns Type Description (T source, T target) Type Parameters Name Description T | Edit this page View Source ToBinary<T>(T) Converts the number to the binary representation Declaration public static string ToBinary<T>(this T num) Parameters Type Name Description T num Target number Returns Type Description string A binary representation of the number Type Parameters Name Description T | Edit this page View Source ToHex<T>(T) Converts the number to the hexadecimal representation Declaration public static string ToHex<T>(this T num) Parameters Type Name Description T num Target number Returns Type Description string A hexadecimal representation of the number Type Parameters Name Description T | Edit this page View Source ToNumber<T>(T) Converts the number to the number representation Declaration public static string ToNumber<T>(this T num) Parameters Type Name Description T num Target number Returns Type Description string A number representation of the number Type Parameters Name Description T | Edit this page View Source ToOctal<T>(T) Converts the number to the octal representation Declaration public static string ToOctal<T>(this T num) Parameters Type Name Description T num Target number Returns Type Description string An octal representation of the number Type Parameters Name Description T"
  },
  "api/Magico.Reflection.MethodManager.html": {
    "href": "api/Magico.Reflection.MethodManager.html",
    "title": "Class MethodManager | Magico API - Aptivi",
    "summary": "Class MethodManager Method management module Inheritance object MethodManager Namespace: Magico.Reflection Assembly: Magico.dll Syntax public static class MethodManager Methods | Edit this page View Source GetMethod(string, Type) Gets a method from method name Declaration public static MethodBase? GetMethod(string Method, Type methodType) Parameters Type Name Description string Method Method name. Use operator NameOf to get name. Type methodType From which type do we need to get a method from? Returns Type Description MethodBase Method information | Edit this page View Source InvokeMethod(MethodBase?, object, params object?[]?) Invokes a non-static method with arguments Declaration public static object? InvokeMethod(MethodBase? method, object obj, params object?[]? args) Parameters Type Name Description MethodBase method The method to find and execute object obj The object on which to invoke the method object[] args Arguments to be specified to the method. Review the method signature for more information. Returns Type Description object The value of the returned object from the method | Edit this page View Source InvokeMethod(string, object, params object?[]?) Invokes a non-static method with arguments Declaration public static object? InvokeMethod(string method, object obj, params object?[]? args) Parameters Type Name Description string method The method to find and execute object obj The object on which to invoke the method object[] args Arguments to be specified to the method. Review the method signature for more information. Returns Type Description object The value of the returned object from the method | Edit this page View Source InvokeMethod(string, object, Type, params object?[]?) Invokes a non-static method with arguments Declaration public static object? InvokeMethod(string method, object obj, Type methodType, params object?[]? args) Parameters Type Name Description string method The method to find and execute object obj The object on which to invoke the method Type methodType From which type do we need to get a method from? object[] args Arguments to be specified to the method. Review the method signature for more information. Returns Type Description object The value of the returned object from the method | Edit this page View Source InvokeMethodStatic(MethodBase?, params object?[]?) Invokes a static method with arguments Declaration public static object? InvokeMethodStatic(MethodBase? method, params object?[]? args) Parameters Type Name Description MethodBase method The method to find and execute object[] args Arguments to be specified to the method. Review the method signature for more information. Returns Type Description object The value of the returned object from the method | Edit this page View Source InvokeMethodStatic(string, Type, params object?[]?) Invokes a static method with arguments Declaration public static object? InvokeMethodStatic(string method, Type methodType, params object?[]? args) Parameters Type Name Description string method The method to find and execute Type methodType From which type do we need to get a method from? object[] args Arguments to be specified to the method. Review the method signature for more information. Returns Type Description object The value of the returned object from the method"
  },
  "api/Magico.Reflection.PropertyManager.html": {
    "href": "api/Magico.Reflection.PropertyManager.html",
    "title": "Class PropertyManager | Magico API - Aptivi",
    "summary": "Class PropertyManager Property management module Inheritance object PropertyManager Namespace: Magico.Reflection Assembly: Magico.dll Syntax public static class PropertyManager Methods | Edit this page View Source CheckProperty(string, Type) Checks the specified property if it exists Declaration public static bool CheckProperty(string Variable, Type Type) Parameters Type Name Description string Variable Property name. Use operator NameOf to get name. Type Type Property type Returns Type Description bool | Edit this page View Source GetAllProperties(Type[]) Gets all the properties from the type dynamically Declaration public static Dictionary<string, object?> GetAllProperties(Type[] types) Parameters Type Name Description Type[] types Array of types to query Returns Type Description Dictionary<string, object> Dictionary containing all properties | Edit this page View Source GetAllPropertiesNoEvaluation(Type[]) Gets all the properties from the type without evaluation Declaration public static Dictionary<string, Type> GetAllPropertiesNoEvaluation(Type[] types) Parameters Type Name Description Type[] types Array of types to query Returns Type Description Dictionary<string, Type> Dictionary containing all properties | Edit this page View Source GetAllProperties<T>(T, Type[]) Gets all the properties from the type dynamically Declaration public static Dictionary<string, object?> GetAllProperties<T>(T instance, Type[] types) Parameters Type Name Description T instance Instance Type[] types Array of types to query Returns Type Description Dictionary<string, object> Dictionary containing all properties Type Parameters Name Description T | Edit this page View Source GetProperties(Type) Gets the properties from the type dynamically Declaration public static Dictionary<string, object?> GetProperties(Type VariableType) Parameters Type Name Description Type VariableType Variable type Returns Type Description Dictionary<string, object> Dictionary containing all properties | Edit this page View Source GetPropertiesNoEvaluation(Type) Gets the properties from the type without evaluation Declaration public static Dictionary<string, Type> GetPropertiesNoEvaluation(Type VariableType) Parameters Type Name Description Type VariableType Variable type Returns Type Description Dictionary<string, Type> Dictionary containing all properties | Edit this page View Source GetProperties<T>(T, Type) Gets the properties from the type dynamically Declaration public static Dictionary<string, object?> GetProperties<T>(T instance, Type VariableType) Parameters Type Name Description T instance Instance Type VariableType Variable type Returns Type Description Dictionary<string, object> Dictionary containing all properties Type Parameters Name Description T | Edit this page View Source GetProperty(string, Type) Gets a property from variable name Declaration public static PropertyInfo? GetProperty(string Variable, Type Type) Parameters Type Name Description string Variable Property name. Use operator NameOf to get name. Type Type Property type Returns Type Description PropertyInfo Property information | Edit this page View Source GetPropertyValue(PropertyInfo?) Gets the value of a property dynamically Declaration public static object? GetPropertyValue(PropertyInfo? Variable) Parameters Type Name Description PropertyInfo Variable Property info instance. Returns Type Description object Value of a property | Edit this page View Source GetPropertyValue(string, Type?) Gets the value of a property dynamically Declaration public static object? GetPropertyValue(string Variable, Type? VariableType) Parameters Type Name Description string Variable Property name. Use operator NameOf to get name. Type VariableType Property type Returns Type Description object Value of a property | Edit this page View Source GetPropertyValueInstanceExplicit(object, string, Type?) Gets the value of a property dynamically Declaration public static object? GetPropertyValueInstanceExplicit(object instance, string Variable, Type? VariableType) Parameters Type Name Description object instance Instance class to fetch value from string Variable Property name. Use operator NameOf to get name. Type VariableType Property type Returns Type Description object Value of a property | Edit this page View Source GetPropertyValueInstance<T>(T, PropertyInfo?) Gets the value of a property dynamically Declaration public static object? GetPropertyValueInstance<T>(T instance, PropertyInfo? Variable) Parameters Type Name Description T instance Instance class to fetch value from PropertyInfo Variable Property info instance. Returns Type Description object Value of a property Type Parameters Name Description T | Edit this page View Source GetPropertyValueInstance<T>(T, string) Gets the value of a property dynamically Declaration public static object? GetPropertyValueInstance<T>(T instance, string Variable) Parameters Type Name Description T instance Instance class to fetch value from string Variable Property name. Use operator NameOf to get name. Returns Type Description object Value of a property Type Parameters Name Description T | Edit this page View Source GetPropertyValueInstance<T>(T, string, Type?) Gets the value of a property dynamically Declaration public static object? GetPropertyValueInstance<T>(T instance, string Variable, Type? VariableType) Parameters Type Name Description T instance Instance class to fetch value from string Variable Property name. Use operator NameOf to get name. Type VariableType Property type Returns Type Description object Value of a property Type Parameters Name Description T | Edit this page View Source SetPropertyValue(PropertyInfo?, object?) Sets the value of a property to the new value dynamically Declaration public static void SetPropertyValue(PropertyInfo? Variable, object? VariableValue) Parameters Type Name Description PropertyInfo Variable Property info instance. object VariableValue New value | Edit this page View Source SetPropertyValue(string, object?, Type?) Sets the value of a property to the new value dynamically Declaration public static void SetPropertyValue(string Variable, object? VariableValue, Type? VariableType) Parameters Type Name Description string Variable Property name. Use operator NameOf to get name. object VariableValue New value Type VariableType Property type | Edit this page View Source SetPropertyValueInstanceExplicit(object, string, object?, Type?) Sets the value of a property to the new value dynamically Declaration public static void SetPropertyValueInstanceExplicit(object instance, string Variable, object? VariableValue, Type? VariableType) Parameters Type Name Description object instance Instance class to make changes on string Variable Property name. Use operator NameOf to get name. object VariableValue New value Type VariableType Property type | Edit this page View Source SetPropertyValueInstance<T>(T, PropertyInfo?, object?) Sets the value of a property to the new value dynamically Declaration public static void SetPropertyValueInstance<T>(T instance, PropertyInfo? Variable, object? VariableValue) Parameters Type Name Description T instance Instance class to make changes on PropertyInfo Variable Property info instance. object VariableValue New value Type Parameters Name Description T | Edit this page View Source SetPropertyValueInstance<T>(T, string, object?) Sets the value of a property to the new value dynamically Declaration public static void SetPropertyValueInstance<T>(T instance, string Variable, object? VariableValue) Parameters Type Name Description T instance Instance class to make changes on string Variable Property name. Use operator NameOf to get name. object VariableValue New value Type Parameters Name Description T | Edit this page View Source SetPropertyValueInstance<T>(T, string, object?, Type?) Sets the value of a property to the new value dynamically Declaration public static void SetPropertyValueInstance<T>(T instance, string Variable, object? VariableValue, Type? VariableType) Parameters Type Name Description T instance Instance class to make changes on string Variable Property name. Use operator NameOf to get name. object VariableValue New value Type VariableType Property type Type Parameters Name Description T"
  },
  "api/Magico.Reflection.ReflectionCommon.html": {
    "href": "api/Magico.Reflection.ReflectionCommon.html",
    "title": "Class ReflectionCommon | Magico API - Aptivi",
    "summary": "Class ReflectionCommon Common reflection tools Inheritance object ReflectionCommon Namespace: Magico.Reflection Assembly: Magico.dll Syntax public static class ReflectionCommon Methods | Edit this page View Source IsDotnetAssemblyFile(string, out AssemblyName?) If the specified file is a .NET assembly Declaration public static bool IsDotnetAssemblyFile(string path, out AssemblyName? asmName) Parameters Type Name Description string path Absolute path to the assembly file AssemblyName asmName Assembly name Returns Type Description bool True if it's a real assembly; false otherwise | Edit this page View Source IsTypeNumeric<T>() Checks to see if a specified type is numeric or not Declaration public static bool IsTypeNumeric<T>() Returns Type Description bool True if numeric; false otherwise Type Parameters Name Description T Type to check"
  },
  "api/Magico.Reflection.html": {
    "href": "api/Magico.Reflection.html",
    "title": "Namespace Magico.Reflection | Magico API - Aptivi",
    "summary": "Namespace Magico.Reflection Classes BaseClassTools Tools for base classes FieldManager Field management module IntegerTools Tools to manipulate with integers MethodManager Method management module PropertyManager Property management module ReflectionCommon Common reflection tools"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Magico API - Aptivi",
    "summary": "What is this web page? This webpage is an API documentation for developers to be used as reference. It constantly gets updated as we push new versions and new APIs, as well as updated documentation. If your IDE supports Intellisense, you don't need to open this web page. If you still intend to use a documentation specific to your preferred version, you may refer to the releases page of the project and download the attached <version>-doc.zip file. To get started using the documentation, select API Documentation from the top menu and select a namespace to get a clear overview of the API. Feedback If you wish to leave feedback to us about this API reference website, use the issue tracker of the project. If you wish to contribute to the documentation of the API, go to the project source code and make your improvements there on a draft Pull Request; we don't support override files that are made by clicking on Improve this doc. Any meaningful contributions are welcome, as long as they follow the code on conduct and contribution guidelines."
  }
}